@page "/live"
@using Models;
@inject IJSRuntime JS;
@inject IConfiguration _configuration;
@inject Services.DataSubscriptionService _dataSvc;
@implements Services.IDataSubscriptionSubscriber;
@implements IDisposable;

<div class="live-container container-fluid">
    <div class="row">

        <div class="col-4 fh" id="map-area">

        </div>

        <div class="col-8">
            <p>Data last received: @DataLastReceived?.ToString("yyyy-MM-dd HH:mm:ss")</p>
            <div class="row" id="stat-cards" style="margin-top:0.5em;">
                <div class="col-md-4">
                    <div class="data-card">
                        <div class="data-card-heading">Altitude (Feet)</div>
                        <div class="data-card-value">@AltitudeValue</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="data-card">
                        <div class="data-card-heading">Speed (Knots)</div>
                        <div class="data-card-value">@Math.Round(SpeedValue ?? 0, 2)</div>
                    </div>
                </div>
                <div class="col-md-4">
                    <div class="data-card">
                        <div class="data-card-heading">Heading (ºTrue)</div>
                        <div class="data-card-value">@Math.Round(lastTrueTrackAngle ?? 0,2)</div>
                    </div>
                </div>
            </div>

            <div class="row" id="stat-cards" style="margin-top:0.5em;">

            </div>

            <div class="row" id="gauges">
                <span id="airspeed"></span>
                <span id="attitude"></span>
                <span id="altimeter"></span>
                <span id="heading"></span>
                <span id="variometer"></span>
            </div>

            <div class="row" id="charts">
                <div class="col-12">
                    <div class="data-card">
                        <canvas id="altitudeChart" style="width:100%; height:400px;"></canvas>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

@code {

    private IJSObjectReference? _liveModule;

    private object? AltitudeValue;
    private decimal? SpeedValue;
    private decimal? HeadingValue;
    private object? verticalSpeedValue;

    public DateTime? DataLastReceived;

    private Dictionary<string, object> LatestValues = new Dictionary<string, object>();

    private decimal? lastLatitude;
    private decimal? lastLongitude;
    private decimal? lastTrueTrackAngle;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _dataSvc.AddSubscriber(this);
            _liveModule = await JS.InvokeAsync<IJSObjectReference>("import", "./js/modules/live.js");

            await _liveModule!.InvokeVoidAsync("initMap", _configuration.GetValue<string>("AzureMapsKey"));

            await _liveModule!.InvokeVoidAsync("initGauges");
            await _liveModule!.InvokeVoidAsync("initCharts");
        }
    }

    public void Dispose() {
        _dataSvc.RemoveSubscriber(this);
    }

    public void ProcessNewData(DecodedDataMessage message)
    {
        this.InvokeAsync(() =>
        {
            DataLastReceived = DateTime.UtcNow;
            foreach (var key in message.DecodedValues.Keys)
            {
                if (key.Contains("ALTITUDE"))
                {
                     this.AltitudeValue = message.DecodedValues[key].LastOrDefault() ?? AltitudeValue;
                }
                else if (key.Contains("COMPUTED_AIRSPEED"))
                {
                    SpeedValue = message.DecodedValues[key].LastOrDefault() as decimal? ?? SpeedValue;
                }
                else if (key.Contains("HEADING"))
                {
                    HeadingValue = message.DecodedValues[key].LastOrDefault() as decimal? ?? HeadingValue;
                }
                else if (key == "DERIVED_LATITUDE")
                {
                    lastLatitude = message.DecodedValues[key].FirstOrDefault() as decimal? ?? lastLatitude;
                }
                else if (key == "DERIVED_LONGITUDE")
                {
                    lastLongitude = message.DecodedValues[key].FirstOrDefault() as decimal? ?? lastLongitude;
                }
                else if (key.Contains("TRACK_ANGLE_TRUE"))
                {
                    lastTrueTrackAngle = message.DecodedValues[key].FirstOrDefault() as decimal? ?? lastTrueTrackAngle;
                }

                if (!LatestValues.ContainsKey(key))
                {
                    LatestValues.Add(key, 0);
                }
                LatestValues[key] = message.DecodedValues[key];

            }

            UpdatePlanePosition();
            UpdateGauges();

            StateHasChanged();
        });
    }

    private async Task UpdatePlanePosition()
    {
        if (lastLongitude == null || lastLatitude == null)
            return;

        await _liveModule!.InvokeVoidAsync("updatePlanePos", lastLatitude.Value, lastLongitude.Value, lastTrueTrackAngle);
    }

    private async Task UpdateGauges()
    {
        await _liveModule!.InvokeVoidAsync("updateGauges", SpeedValue, AltitudeValue, lastTrueTrackAngle, verticalSpeedValue);
    }
}